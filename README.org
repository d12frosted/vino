:PROPERTIES:
:ID:                     e2554430-e28e-4b63-b598-5718bea73a62
:END:

#+begin_html
<h1 align="center">Vino</h1>
<h3 align="center">üç∑It's your cellar, your dear cantina üç∑</h3>
<p align="center">
  <a href="https://github.com/d12frosted/vino/releases">
    <img alt="GitHub tag (latest by date)" src="https://img.shields.io/github/v/tag/d12frosted/vino">
  </a>
  <a href="https://github.com/d12frosted/vino/actions?query=workflow%3ACI">
    <img src="https://github.com/d12frosted/vino/workflows/CI/badge.svg" alt="CI Status Badge">
  </a>
</p>
#+end_html

=vino= is an Emacs program for cellar tracking and wine rating. Every entity is
stored as separate Org file, =vino= provides convenient functions to query and
manipulate these files.

Please note, that =vino= does not ship with collection of Org file for wines,
producers, grapes, appellations or wine regions. The idea is that each user
creates his/her own collection and learns about huge world of wine in the
process.

* Table of Contents                                                :TOC_3_gh:
:PROPERTIES:
:ID:                     6383aaf3-05fc-403f-b3f5-05dab6501d57
:END:

- [[#goals][Goals]]
- [[#status-and-roadmap][Status and roadmap]]
- [[#getting-started][Getting started]]
  - [[#installing][Installing]]
    - [[#straightel][straight.el]]
  - [[#configuration][Configuration]]
    - [[#example-configuration][Example configuration]]
  - [[#interactive-functions][Interactive functions]]
- [[#notes-structure][Notes structure]]
  - [[#appellationregion][Appellation/region]]
  - [[#producer][Producer]]
  - [[#grape][Grape]]
  - [[#vino-entry][Vino entry]]
  - [[#vino-rating][Vino rating]]
  - [[#org-roam-tags][=org-roam= Tags]]
- [[#database][Database]]
- [[#how-to-][How to ...]]
  - [[#configure-rating-system][Configure rating system]]
  - [[#store-images-and-other-attachments][Store images and other attachments]]
  - [[#query-additional-metadata-when-creating-a-new-wine-entry][Query additional metadata when creating a new wine entry]]
  - [[#query-additional-metadata-when-rating-a-wine-entry][Query additional metadata when rating a wine entry]]
- [[#coding][Coding]]
- [[#building-and-testing][Building and testing]]
- [[#faq][FAQ]]
  - [[#why-not-generalise][Why not generalise?]]
  - [[#why-not-cellar-tracker-vivino-etc][Why not Cellar Tracker, Vivino, etc.?]]

* Goals
:PROPERTIES:
:ID:                     db8950da-aad1-41f3-940a-7140c6ce6209
:END:

- Provide functionality to create wine entries and to rate them.
- Provide functionality to track availability of wine entries.
- Provide functionality to evolve rating system.
- Provide functionality for maintenance.
- Provide functionality to query wine entries based on different predicates.
- Be able to handle big (1000+) collection of wine entries.

* Status and roadmap
:PROPERTIES:
:ID:                     626c7352-8762-4800-8c2e-de3068c386d0
:END:

This project started as a rewrite of [[https://github.com/d12frosted/environment/blob/3d387cb95353cfe79826d24abbfd1b6091669957/emacs/lisp/%2Borg-wine.el][+org-wine.el]] from [[https://github.com/Kungsgeten/org-brain][org-brain]] to [[https://github.com/org-roam/org-roam/][org-roam]] (of
course, using [[https://github.com/d12frosted/vulpea][vulpea]]) in performance pursuit (it become critical as I have 1k+
of wine entries and around 2k of grape, producers, appellations, regions notes).

This library is in very early stages of development. Functions come and
functions go. See [[https://github.com/d12frosted/vulpea/milestone/1][v0.1 milestone]] for some kind of progress tracking. It should
be the first stable release. The goal is to have feature parity with
[[https://github.com/d12frosted/environment/blob/3d387cb95353cfe79826d24abbfd1b6091669957/emacs/lisp/%2Borg-wine.el][+org-wine.el]].

- [X] [[https://github.com/d12frosted/vino/milestone/1][v0.1]] - feature parity with [[https://github.com/d12frosted/environment/blob/3d387cb95353cfe79826d24abbfd1b6091669957/emacs/lisp/%2Borg-wine.el][+org-wine.el]].
- [ ] [[https://github.com/d12frosted/vino/milestone/2][v0.2]] - dedicated database for =vino= needs.
- [ ] [[https://github.com/d12frosted/vino/milestone/3][v0.3]] - inventory solutions (built-in and external like [[https://github.com/d12frosted/environment/blob/4164a5abd43d478fd314bb299ea4e1024d89c39c/emacs/lisp/+inventory.el][+inventory.el]]).
- [ ] [[https://github.com/d12frosted/vino/milestone/4][v0.4]] - querying and viewing.

* Getting started
:PROPERTIES:
:ID: b065010c-acc7-4685-a7eb-f342c54b3558
:END:

** Installing
:PROPERTIES:
:ID:                     ee4a877a-a870-41b9-8820-9aa910fb14b4
:END:

=vino= is not available via MELPA, so you can install it manually, using
[[https://github.com/raxod502/straight][straight]], [[https://github.com/quelpa/quelpa][quelpa]], or any other tool. Once installed, you need to call
=vino-setup= once.

Keep in mind that =vino= depends on [[https://github.com/d12frosted/vulpea][vulpea]].

*** straight.el
:PROPERTIES:
:ID:                     2beccee5-417a-4053-8275-217f41dedcca
:END:

#+begin_src emacs-lisp
  (straight-use-package vulpea)
  (vulpea-setup)

  (straight-use-package
   '(vino :type git :host github :repo "d12frosted/vino"))
  (vino-setup)
#+end_src

In case you have [[https://github.com/raxod502/straight.el/#integration-with-use-package][integration]] with [[https://github.com/jwiegley/use-package][use-package]]:

#+begin_src emacs-lisp
  (use-package vulpea
    :hook
    (after-init . vulpea-setup))

  (use-package vino
    :straight (vino
               :type git
               :host github
               :repo "d12frosted/vino")
    :hook
    (after-init . vino-setup))
#+end_src

** Configuration
:PROPERTIES:
:ID:                     f7b2fe31-4695-441c-82e8-421f8e2a2fa1
:END:

There are several things that you must configure before using =vino=:

- =org-roam-directory= - this is where your =vino= files will be located. See
  [[#notes-structure][Notes structure]] for more information on how to structure this directory.
- =org-roam-tag-sources= - this variable is as important as the previous one. It
  must include =all-directories= unless you wish to manually tag each file.
  Please read [[#org-roam-tags][=org-roam= Tags]] for more information.
- =vino-rating-props= - this variable describes your rating system. See
  [[#configure-rating-system][Configure rating system]] for more information on how to setup this variable.
- =vino-availability-fn= - function to check availability of =vino-entry=. It is
  called with =ID= of =vino-entry= and must return a cons of acquired and
  consumed numbers, e.g. =(const 10 4)= means that this particular wine was
  acquired 10 times and consumed 4 times, making 6 available.
- =vino-availability-add-fn= - function to add certain amount of =vino-entry= to
  your cellar. Function is called with =ID= of =vino-entry=, amount, source and
  date arguments.
- =vino-availability-sub-fn= - function to subtract certain amount of
  =vino-entry= from your cellar. Function is called with =ID= of =vino-entry=,
  amount, action and date arguments.

Optionally you can configure the following variables:

- =vino-db-location= - the full path to file where =vino= database is stored.
- =vino-db-gc-threshold= - the temporary value for =gc-cons-threshold= to use
  during heavy operations like =vino-db-build-cache=. For performance
  considerations, you might set it to some high value (like
  =most-positive-fixnum=).
- =vino-carbonation-types= - list of carbonation types, e.g. =still= and
  =sparkling=. Modify it in case you want to be more granular, e.g.
  =traditional-sparkling=, =pet-nat=, etc.
- =vino-colour-types= - list of wine colours, e.g. =red=, =white= and =rose=.
  You might want to add =orange= unless you are marking them as =white=.
- =vino-sweetness-levels= - a property list where key is carbonation type and
  value is list of sweetness levels (e.g. =dry=, =sweet=, etc).
- =vino-rating-template= - =org-capture= template for new wine ratings. Passed
  to =vulpea-create=, which enriches context with variables like =id=, =title=
  and =slug=.
- =vino-entry-template= - =org-capture= template for new wine entry. Passed
  to =vulpea-create=, which enriches context with variables like =id=, =title=
  and =slug=.
- =vino-grape-template= - =org-capture= template for new grape note. Passed to
  =vulpea-create=, which enriches context with variables like =id=, =title= and
  =slug=. Useful when selecting a grape for wine entry that does not exist or
  when calling =vulpea-grape-create=
- =vino-producer-template= - =org-capture= template for new producer note. Passed
  to =vulpea-create=, which enriches context with variables like =id=, =title=
  and =slug=. Used by =vulpea-producer-create=.
- =vino-region-template= - =org-capture= template for new region note. Passed to
  =vulpea-create=, which enriches context with variables like =id=, =title= and
  =slug=. Used by =vulpea-region-create=.
- =vino-appellation-template= - =org-capture= template for new appellation note.
  Passed to =vulpea-create=, which enriches context with variables like =id=,
  =title= and =slug=. Used by =vulpea-appellation-create=.

*** Example configuration
:PROPERTIES:
:ID:                     a796506e-ff4c-4a1f-8d00-50b02692b26c
:END:

Mandatory values (uses functions from [[https://github.com/d12frosted/environment/blob/4164a5abd43d478fd314bb299ea4e1024d89c39c/emacs/lisp/+inventory.el][+inventory.el]]).

#+begin_src emacs-lisp
    (setq
     org-roam-directory (concat (getenv "HOME")
                                "/org-roam/")
   
     org-roam-tag-sources '(prop all-directories)

     vino-rating-props '((1 . (("SCORE" . 3)))
                         (2 . (("AROMA_QUALITY" . 3)
                               ("AROMA_INTENSITY" . 2)
                               ("AROMA_COMPLEXITY" . 3)
                               ("BALANCE" . 3)
                               ("FLAVOURS" . 2)
                               ("AFTERTASTE" . 3)
                               ("GENERAL" . 4))))

     vino-availability-fn
     (lambda (id)
       (cons
        (inventory-total-in wine-inventory-file id)
        (inventory-total-out wine-inventory-file id)))

     vino-availability-add-fn
     (lambda (id amount source date)
       (inventory-add wine-inventory-file id amount source date))

     vino-availability-sub-fn
     (lambda (id amount action date)
       (inventory-sub wine-inventory-file id amount action date)))
#+end_src

Optional variables (with their default values):

#+begin_src emacs-lisp
  (setq
   vino-carbonation-types '(still
                            sparkling)

   vino-colour-types '(red
                       white
                       rose)

   vino-sweetness-levels (list 'still '(dry
                                        semi-dry
                                        semi-sweet
                                        sweet)
                               'sparkling '(brut-nature
                                            extra-brut
                                            brut
                                            extra-dry
                                            dry
                                            demi-sec
                                            doux))

   vino-rating-template
   (list
    :file-name "wine/rating/${id}"
    :head "#+TITLE: ${title}\n\n"
    :unnarrowed t
    :immediate-finish t)

   vino-entry-template
   (list :file-name "wine/cellar/${id}"
         :head "#+TITLE: ${title}\n\n"
         :unnarrowed t
         :immediate-finish t)

   vino-grape-template
   (list :file-name "wine/grape/%<%Y%m%d%H%M%S>-${slug}"
         :head "#+TITLE: ${title}\n\n"
         :unnarrowed t
         :immediate-finish t)

   vino-producer-template
   (list :file-name "wine/producer/%<%Y%m%d%H%M%S>-${slug}"
         :head "#+TITLE: ${title}\n\n"
         :unnarrowed t
         :immediate-finish t)

   vino-region-template
   (list :file-name "wine/region/%<%Y%m%d%H%M%S>-${slug}"
         :head "#+TITLE: ${title}\n\n"
         :unnarrowed t
         :immediate-finish t)

   vino-appellation-template
    (list :file-name "wine/appellation/%<%Y%m%d%H%M%S>-${slug}"
          :head "#+TITLE: ${title}\n\n"
          :unnarrowed t
          :immediate-finish t))
#+end_src

** Interactive functions
:PROPERTIES:
:ID:                     b85937bf-ebca-41d5-8a2e-a23cb95bb489
:END:

- =vino-entry-create= - create a new =vino-entry= according to
  =vino-entry-template=. It interactively reads carbonation type, colour type,
  sweetness level, producer, name, vintage, appellation or region, grapes,
  alcohol level, sugar, resources and price. Producer, appellation, region and
  grapes are linked using =org-roam=.
- =vino-entry-find-file= - select and visit =vino-entry=.
- =vino-entry-update= - update visiting (or selected) =vino-entry=. It refreshes
  =rating= and =availability= (using =vino-availability-fn=). You rarely need to
  use this function, unless availability or rating is modified manually.
- =vino-entry-update-title= - update visiting (or selected) =vino-entry= title.
  It also changes the title of all linked =ratings=. You only need this function
  if you modify a producer name, wine entry name or vintage manually and want to
  update everything. Might take a while, depending on amount of linked
  =ratings=.
- =vino-entry-set-grapes= - set grapes of visiting (or selected) =vino-entry= by
  replacing existing.
- =vino-entry-set-region= - set region (or appellation) of visiting (or
  selected) =vino-entry= by replacing existing.
- =vino-entry-acquire= - acquire visiting (or selected) =vino-entry=. Reads a
  source, amount, price and date, and calls =vino-availability-add-fn=.
- =vino-entry-consume= - consume visiting (or selected) =vino-entry=. Reads a
  action, amount and date, and calls =vino-availability-sub-fn=. For convenience
  also asks you to rate entry if the action is =consume=.
- =vino-entry-rate= - rate a visiting (or selected) =vino-entry=. Reads a date,
  props defined by =vino-rating-props=, creates a new rating note according to
  =vino-rating-template= and creates a link between wine and rating.
- =vino-grape-create= - create a new =grape= note according to
  =vino-grape-template=.
- =vino-grape-find-file= - select and visit =grape= note.
- =vino-producer-create= - create a new =producer= note according to
  =vino-producer-template=.
- =vino-producer-find-file= - select and visit =producer= note.
- =vino-region-create= - create a new =region= note according to
  =vino-region-template=.
- =vino-appellation-create= - create a new =appellation= note according to
  =vino-appellation-template=.
- =vino-region-find-file= - select and visit =region= or =appellation= note.
- =vino-db-build-cache= - build =vino= database cache.

* Notes structure
:PROPERTIES:
:ID:                     98b08892-811d-41d5-9dc1-6cff3d2e4382
:END:

=vino= assumes the following structure of your =org-roam-directory=:

#+begin_example
  .
  ‚îî‚îÄ‚îÄ wine
      ‚îú‚îÄ‚îÄ appellation
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cerasuolo_di_vittoria_docg.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ etna_doc.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ igp_terre_siciliane.org
      ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ...
      ‚îú‚îÄ‚îÄ cellar
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 2c012cee-878b-4199-9d3b-782d671bd198.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 4faf700f-c8b9-403d-977c-8dee9e577514.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ b20373db-43d3-4f2c-992c-6c6b5a4f3960.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ c9937e3e-c83d-4d8d-a612-6110e6706252.org
      ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ...
      ‚îú‚îÄ‚îÄ grape
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ frappato.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ nerello_mascalese.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ nero_d_avola.org
      ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ...
      ‚îú‚îÄ‚îÄ producer
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ arianna_occhipinti.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pyramid_valley.org
      ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ...
      ‚îú‚îÄ‚îÄ rating
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ be7777a9-7993-44cf-be9e-0ae65297a35d.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ bbc0c0f6-6f85-41a8-a386-f2017ceeaeb3.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 727d03f3-828a-4957-aaa9-a19fd0438a15.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ d9e29c8e-06af-41d3-a573-72942cea64da.org
      ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ a5022e95-4584-43bd-ac55-599a942a6933.org
      ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ...
      ‚îî‚îÄ‚îÄ region
          ‚îú‚îÄ‚îÄ central_otago.org
          ‚îú‚îÄ‚îÄ gisborne.org
          ‚îú‚îÄ‚îÄ kumeu.org
          ‚îî‚îÄ‚îÄ ...
#+end_example

It's totally fine to have other notes in your =org-roam-directory= (this is how
I use it) and even in =wine= folder, but please keep in mind that any file in
=appellation=, =cellar=, =grape=, =producer=, =rating= and =region= will be
processed by =vino=. Read further to learn more about each folder and note type.

** Appellation/region
:PROPERTIES:
:ID:                     cf3c3359-c438-4e00-8d27-6239704777a2
:END:

Each file represents either an appellation (like Cerasuolo di Vittoria DOCG or
Morgon AOC) or a wine region (like Central Otago in New Zealand or Codru in
Moldova). There are no restrictions on these files, except for presence of
=appellation= or =region= tag in addition to =wine= tag. See [[#org-roam-tags][=org-roam= Tags]] for
more information.

#+begin_example
  $ cat wine/region/20201214120801-codru.org

  :PROPERTIES:
  :ID:                     b5758d14-61a2-4255-a47d-3cff3b58b321
  :END:
  ,#+TITLE: Codru

  - country :: [[id:6ce0bd2d-9018-4c5f-b896-639a85a6e7a4][Moldova]]

  Codru wine region is located in the central area of [[id:6ce0bd2d-9018-4c5f-b896-639a85a6e7a4][Moldova]]. More than
  60% of vineyards are located in this region.

  Two biggest cellars in the world ([[id:2374143f-5b7e-46ae-9ffc-649f529aaf70][Mile»ôtii Mici]] and [[id:849a36b0-b24b-49e6-9e5d-19fc7ee13a78][Cricova]]) are
  located here.
#+end_example

** Producer
:PROPERTIES:
:ID:                     5316a829-59ab-4e28-8abc-08774630bee6
:END:

Each file represents a producer (like Occhipinti or Vino di Anna). There are no
restrictions on these files, except for presence of =producer= tag in addition
to =wine= tag. See [[#org-roam-tags][=org-roam= Tags]] for more information.

#+begin_example
  $ cat wine/producer/20200511140611-arianna_occhipinti.org

  :PROPERTIES:
  :ID:                     8f62b3bd-2a36-4227-a0d3-4107cd8dac19
  :END:
  ,#+TITLE: Arianna Occhipinti
  ,#+TIME-STAMP: <2020-11-17 12:06:41 d12frosted>
  ,#+ROAM_TAGS: wine producer
  ,#+FILETAGS: @AriannaOcchipinti

  - resources :: [[https://www.bowlerwine.com/producer/occhipinti][bowlerwine.com]]

  Arianna Occhipinti is a winemaker from [[id:3717adb1-4815-4ba6-9730-a884554214c9][Vittoria]] who founded her own winery in
  2004, bottled her first commercial vintage in 2006 and today works exclusively
  with estate fruit. Her 25 hectares feature only autochthonous varieties - 50%
  [[id:b968250e-2035-4b18-bd9f-fce99d5f9915][Frappato]], 35% [[id:c9731b65-61f8-4007-9dbf-d54056f55cc4][Nero d'Avola]] and 15% white varieties [[id:63532852-c67a-4b8d-ac42-1ae9be28610e][Albanello]] and [[id:ab59e210-e7ed-4362-832c-4c4daa2b9e05][Zibibbo]]. Almost
  all vines are young as she planted them, most of them a guyot-trained. But she
  also added to her holdings 60-years-old albarello-trained vines which she
  initially rented.

  ...
#+end_example

** Grape
:PROPERTIES:
:ID:                     230273de-6831-490a-b247-99603c23985b
:END:

Each file represents a producer (like Occhipinti or Vino di Anna). There are no
restrictions on these files, except for presence of =producer= tag in addition
to =wine= tag. See [[#org-roam-tags][=org-roam= Tags]] for more information.

#+begin_example
  $ cat wine/grape/20200406154953-nerello_mascalese.org

  :PROPERTIES:
  :ID:                     9c1a5bec-9390-429e-bea9-4f1cce05f79c
  :END:
  ,#+TITLE: Nerello Mascalese
  ,#+TIME-STAMP: <2020-11-17 12:06:29 d12frosted>

  - resources :: [[https://winefolly.com/grapes/nerello-mascalese/][Winefolly]]
  - resources :: [[https://italianwinecentral.com/variety/nerello-mascalese/][italianwinecentral.com]]

  A rare red Sicilian grape producing fine light to medium-bodied red wines
  reminiscent of Pinot Noir. The best examples are found growing on the volcanic
  soils of Mount Etna.

  Primary flavours:

  - Dried [[id:7a945d62-b5f0-4542-bb1a-f4c8f9dd736b][Cherry]]
  - Orange [[id:8403a37b-be67-4efc-92f1-377aea0c8c50][Zest]]
  - Dried [[id:83a86596-437f-4931-a147-af1bd7734d28][Thyme]]
  - [[id:76cef2c9-0fc7-4802-8873-1c78a6be21da][Allspice]]
  - Crushed [[id:3b843816-3c5b-4758-89f6-804596087881][Gravel]]

  Taste profile:

  - sweetness: bone-dry
  - body: medium-light
  - tannins: medium
  - acidity: medium-high
  - alcohol: 11.5-13.5% ABV

  Handling

  - serve: 12-15¬∞C
  - glass type: [[id:a88ce31d-bfb0-4343-9359-c4a366ad6a6b][Aroma Collector Glass]]
  - decant: 30 minutes
  - cellar: 10+ years
#+end_example

** Vino entry
:PROPERTIES:
:ID:                     3b12dd67-4a6c-4669-97a0-ecff94fa1eb6
:END:

Each file represents a wine, specified by producer, name and vintage. Obviously,
you don't need to create separate files for two bottles of La Stoppa Ageno 2015,
but you definitely need separate note from La Stoppa Ageno 2017 (vintage is
different).

It's best if you create a vino entry using =vino-entry-create= interactive
function. It reads all required information, creates new file (uses =ID= as file
name), fills it will provided information and links producer, grapes,
appellation and region.

Vino entry is defined as a =cl-struct=:

#+begin_src emacs-lisp
  (cl-defstruct vino-entry
    carbonation
    colour
    sweetness
    producer
    name
    vintage
    appellation
    region
    grapes
    alcohol
    sugar
    resources
    price
    acquired
    consumed
    rating
    ratings)
#+end_src

Most of the fields are mandatory, except for:

- =vintage= - unless specified, printed as =NV= string;
- =sugar= - unless specified, printed as =NA= string;
- =rating= - unless =ratings= list is non-nil, printed as =NA= string;
- =ratings= - unless empty, omitted from the file.

Title if the file is set automatically upon creation and can be updated using
=vino-entry-update-title= if you modify something manually. This also updates
the title of linked rating files.

Availability is modified using =vino-entry-acquire= and =vino-entry-consume=. In
case you edited availability manually outside, use =vino-entry-update= to sync
it.

Rating is updated automatically upon using =vino-entry-rate= and can be updated
using =vino-entry-update= if you modify any rating note manually.

Vino entry files require the presence of =cellar= tag in addition to =wine= tag.
See [[#org-roam-tags][=org-roam= Tags]] for more information.

#+begin_example
  $ cat wine/cellar/c9937e3e-c83d-4d8d-a612-6110e6706252.org

  :PROPERTIES:
  :ID:                     c9937e3e-c83d-4d8d-a612-6110e6706252
  :END:
  ,#+TITLE: Arianna Occhipinti Bombolieri BB 2017

  - carbonation :: still
  - colour :: red
  - sweetness :: dry
  - producer :: [[id:8f62b3bd-2a36-4227-a0d3-4107cd8dac19][Arianna Occhipinti]]
  - name :: Bombolieri BB
  - vintage :: 2017
  - appellation :: [[id:8353e2fc-8034-4540-8254-4b63fb5a421a][IGP Terre Siciliane]]
  - grapes :: [[id:cb1eb3b9-6233-4916-8c05-a3a4739e0cfa][Frappato]]
  - alcohol :: 13
  - sugar :: 1
  - price :: 50.00 EUR
  - acquired :: 2
  - consumed :: 1
  - available :: 1
  - resources :: [[http://www.agricolaocchipinti.it/it/vinicontrada][agricolaocchipinti.it]]
  - rating :: NA

  ,#+begin_quote
  Il Frappato stems from a dream which I had when I was a girl to make a wine that
  knows the land that I work, the air I breath, and my own thoughts. It is bitter,
  bloody and elegant. That is Vittoria and the Iblei Mountains. It is the wine
  that most resembles me, brave, original and rebellious. But not only. It has
  peasant origins, for this it loves its roots and the past that it brings in;
  but, at the same time, it is able to fight to improve itself. It knows
  refinement without forgetting itself.

  Arianna Occhipinti
  ,#+end_quote
#+end_example

** Vino rating
:PROPERTIES:
:ID:                     86f2bcc9-7bf7-4feb-82d4-5895124d7372
:END:

Each file represents a rating or a tasting note, specified by vino entry and
tasting date. You should create a new rating using =vino-entry-rate=. It reads
rating values according to =vino-rating-props=, creates a file (with =ID= as
file name) and fills it will provided information. Then it links newly created
rating from vino entry and updates the latter.

Rating files require the presence of =rating= tag in addition to =wine= tag. See
[[#org-roam-tags][=org-roam= Tags]] for more information.

#+begin_example
  $ cat wine/rating/f1ecb856-c009-4a65-a8d0-8191a9de66dd.org

  :PROPERTIES:
  :ID:                     f1ecb856-c009-4a65-a8d0-8191a9de66dd
  :END:
  ,#+TITLE: Arianna Occhipinti Bombolieri BB 2017 - 2021-01-15

  - wine :: [[id:c9937e3e-c83d-4d8d-a612-6110e6706252][Arianna Occhipinti Bombolieri BB 2017]]
  - date :: 2021-01-15
  - version :: 1
  - score :: 14
  - score_max :: 20
  - total :: 7.0
#+end_example

** =org-roam= Tags
:PROPERTIES:
:ID:                     813fa350-d83f-4955-9e75-a09af41b47ff
:END:

Each vino file must contain a =wine= tag in addition to type tag (=appellation=,
=region=, =producer=, =grape=, =cellar= or =rating=). Usually that means that
these files should be placed in the relevant folders, so they are tagged
automatically when =org-roam-tag-sources= contains =all-directories=.

But since it's not the only way to tag files, one can put everything in any
place and use =ROAM_TAGS= file property. For example, a vine entry:

#+begin_example
  :PROPERTIES:
  :ID:                     1f4e920e-bfd4-4624-8445-fa8480962c17
  :END:
  ,#+TITLE: La Stoppa Ageno 2015
  ,#+ROAM_TAGS: wine cellar
  ,#+TIME-STAMP: <2021-01-18 21:04:11 d12frosted>

  ...
#+end_example

In this case you should also modify =vino-entry-template= (or other relevant
template), so new entries are not created in =wino/cellar= folder:

#+begin_src emacs-lisp
  (setq vino-entry-template
        (list :file-name "${id}"
              :head "#+TITLE: ${title}\n#+ROAM_TAGS: wine cellar\n\n"
              :unnarrowed t
              :immediate-finish t))
#+end_src

But make sure that =org-roam-tag-sources= contains =prop= value. Otherwise it
will not work.

In general, it's more convenient to store each type in a separate folder. But
it's up to you to decide.

* Database
:PROPERTIES:
:ID:                     a0a87902-0a63-47c0-88f5-179355819cdd
:END:

=vino= provides a dedicated database (just like =org-roam=) that can be used for
fast querying of information. Right now there are no interactive uses for this
database, they are planned in [[https://github.com/d12frosted/vino/milestone/3][v.0.3]] and [[https://github.com/d12frosted/vino/milestone/4][v0.4]]. But you already can build
something on your own.

Available tables (see =vino-db--schemata= for full specification):

- =cellar= - contains =vino-entry= (see [[#vino-entry][Vino entry]]) with some technical metadata
  (=id=, =file= and =hash=);
- =ratings= - contains =vino-rating= (see [[#vino-rating][Vino rating]]) with some technical
  metadata (=id=, =file= and =hash=).

In order to build database you may manually call =vino-db-build-cache=, but in
case you properly [[#installing][installed]] =vino= (e.g. called =vino-setup=), then
=vino-db-build-cache= will be called each time =org-roam-db-build-cache= is
called (e.g. respecting =org-roam-db-update-method=).

In order to query information from database you might use =vino-db-query=:

#+begin_src emacs-lisp
  ;; query top rated wines with rating >= 9
  (vino-db-query
   [:select [producer name vintage rating]
    :from cellar
    :where (>= rating 9)
    :order-by rating :desc])
#+end_src

Right now only low level =vino-db-query= is available, more functions will
become available in [[https://github.com/d12frosted/vino/milestone/4][v0.4]].

* How to ...
:PROPERTIES:
:ID:                     c730ed42-0347-4778-b3fd-feab7f361db3
:END:

** Configure rating system
:PROPERTIES:
:ID:                     6c787546-ca9a-41a0-946d-cc609f5b3393
:END:

Rating is configured by =vino-rating-prop=. My experience shows that rating
system evolves over time. You start with something simple (like a capped
number), then little by little you start to make your rating system more
complex, until one day it's too complex and you return to something simpler :D

So =vino-rating-prop= is a list of all your rating systems, starting with the
first version up to your current. This variable has the following format:

#+begin_src emacs-lisp
  '((1 . PROPS)
    (2 . PROPS)
    (3 . PROPS)
    ...)
#+end_src

And =PROPS= defines a specific version of rating system:

#+begin_src emacs-lisp
  (("PROP_1" . PROP)
   ("PROP_2" . PROP)
   ("PROP_3" . PROP)
   ...)
#+end_src

Each =PROP= can be of one of the following types:

- =number= - then the property value is a number inclusively between =0= and
  =PROP=, user is prompted for a number using =read-number= during =vino-entry-rate=;
- =list= - then the property value is a number inclusively between =0= and the
  length of =PROP=, user is prompted to select one element from the list =car='s
  using =completing-read= during =vino-entry-rate= and the =cdr= of selected
  element is used as value;
- =function= - then the property value is a number between =0= and =cdr= of
  =PROP= result, function is called with without arguments during
  =vino-entry-rate= and =car= of the result is used as value.

Final score is calculated as sum of the values divided by sum of max values and
multiplied by 10. So the final rating is a floating number from =0= to =10=.

Here are several examples to illustrate.

1. Simple rating system that allows user to assign a single number from =0= to
   =3= which is stored as =SCORE=.

   #+begin_src emacs-lisp
     (setq vino-rating-props
           '((1 . (("SCORE" . 3)))))
   #+end_src

2. Another simple rating system that uses multiple properties.

   #+begin_src emacs-lisp
     (setq vino-rating-props
           '((2 . (("AROMA_QUALITY" . 3)
                   ("AROMA_INTENSITY" . 2)
                   ("AROMA_COMPLEXITY" . 3)
                   ("BALANCE" . 3)
                   ("FLAVOURS" . 2)
                   ("AFTERTASTE" . 3)
                   ("GENERAL" . 4)))))
   #+end_src

3. A complex use cases that uses a function for =AROMA_QUALITY= (so default
   value is 3, but if wine has any taints, the value is decreased) and lists for
   everything else.

   #+begin_src emacs-lisp
     (setq vino-rating-props
           '((3 . (("AROMA_QUALITY" .
                    (lambda ()
                      (let* ((total 3)
                             (res total)
                             (ans t)
                             (quit-on "no taints")
                             (opts (list
                                    quit-on
                                    "aggressive ethanol"
                                    "massive brett attack"
                                    "VA, especially nail polish removal")))
                        (while ans
                          (setq ans (completing-read "Any taints? " opts))
                          (setq opts (delete ans opts))
                          (if (string-equal ans "no taints")
                              (setq ans nil)
                            (setq res (max 0 (- res 1))))
                          (when (equal res 0)
                            (setq ans nil)))
                        (cons res total))))

                   ("AROMA_INTENSITY" .
                    (("aroma can be perceived without putting nose into glass" . 2)
                     ("aroma can be perceived only by putting nose into glass" . 1)
                     ("closed, you need to put a lot of effort to get the aroma" . 0)))

                   ("AROMA_RICHNESS" .
                    (("more than 3 different notes" . 3)
                     ("only 3 notes" . 2)
                     ("only 2 notes" . 1)
                     ("only 1 note" . 0)))

                   ("AROMA_COMPLEXITY" .
                    (("sophisticated, multilayered" . 1)
                     ("simple" . 0)))

                   ("BALANCE" .
                    (("perfectly balanced, everything is in its place" . 3)
                     ("well balanced, might be a small issue" . 2)
                     ("average, either one bigger issue or two small" . 1)
                     ("unbalanced, everything else" . 0)))

                   ("FLAVOURS" .
                    (("multiple flavours" . 1)
                     ("only one flavour" . 0)))

                   ("EVOLUTION" .
                    (("taste and flavours evolve over time in mouth" . 1)
                     ("plain, straightforward" . 0)))

                   ("AFTERTASTE" .
                    (("long, lasting more than 30 seconds" . 2)
                     ("average, lasting more than 10 seconds" . 1)
                     ("short" . 0)))

                   ("GENERAL" .
                    (("life changing" . 4)
                     ("great wine, I will definitely look into tasting it once more" . 3)
                     ("good wine, will drink it again with pleasure if situation arises" . 2)
                     ("average wine, only with parents" . 1)
                     ("bad wine, only for enemies" . 0)))))))
   #+end_src

** Store images and other attachments
:PROPERTIES:
:ID:                     c8fb7afd-ba51-4fc2-8ee2-7324348e69b7
:END:

=vino= operates with =org-mode= files, meaning that you can use =org-attach= to
store images as well as other attachments. Refer to [[https://orgmode.org/manual/Attachments.html#Attachments][Org mode documentation]] for
more information.

** Query additional metadata when creating a new wine entry
:PROPERTIES:
:ID:                     877e4ec7-d7af-44f6-85ff-9278af58c061
:END:

See [[https://github.com/d12frosted/vino/issues/65][vino#65]].

** Query additional metadata when rating a wine entry
:PROPERTIES:
:ID:                     b220ca96-48c7-4ee0-b5b6-f7fb79572a22
:END:

See [[https://github.com/d12frosted/vino/issues/64][vino#64]].

* Coding
:PROPERTIES:
:ID:                     fe0386d0-08d2-4eea-8c78-6a43fe97f318
:END:

=vino= is developed using [[https://github.com/doublep/eldev/][eldev]]. If you are using =flycheck=, it is advised to
also use [[https://github.com/flycheck/flycheck-eldev][flycheck-eldev]], as it makes dependencies and project files available
thus mitigating false negative results from default Emacs Lisp checker.

* Building and testing
:PROPERTIES:
:ID:                     5b9d4440-716a-41dd-9598-da916cefcb3e
:END:

=vino= tests are written using [[https://github.com/jorgenschaefer/emacs-buttercup/][buttercup]] testing framework. And [[https://github.com/doublep/eldev/][eldev]] is used to
run them both locally and on CI. In order to run the tests locally, first
[[https://github.com/doublep/eldev/#installation][install]] =eldev= and then run:

#+begin_src bash
  $ make test
#+end_src

Please note, that the linter is used in this project, so you might want to run
it as well:

#+begin_src bash
  $ make lint
#+end_src

* FAQ
:PROPERTIES:
:ID:                     299283b3-6f65-497c-9a87-7638bbc0f4ec
:END:

** Why not generalise?
:PROPERTIES:
:ID:                     75f7f880-998b-4cb6-b047-e2f6473c412c
:END:

My experience shows that some parts of the code base can be shared for tracking
other things, like tea (I have a decent collection of tea, that I also track and
rate) and books. And I am sure there are many more uses cases.

But since most of the time I write about wine, I want to focus solely on this
topic and avoid making perfect an enemy of good.

That being said, please contact me if you wish to use it for other things, I
would love to hear your use case and help you with building solution for you.

** Why not Cellar Tracker, Vivino, etc.?
:PROPERTIES:
:ID:                     83bbfcc4-794f-41f0-a5c4-ab7dcf91add9
:END:

Frankly speaking, I don't trust them to be my source of truth. In my sense both
services have the following drawbacks:

- Data is not owned by you.
- No API to get /your/ information.
- There is no way to modify invalid data.
- Requires internet connection.
- Not helpful for learning - every piece of information is already there.
- Hard limit on amount of information you can put there.
- Not extensible.

=vino= is about learning about wine, owning your data and extending your tools.
With the power of =org-roam= you can do everything :)

That being said, I still use Vivino for:

- Reading tasting notes of peoples whose opinion I respect. This also helps me
  to find new interesting bottles available in my location.
- Sharing some of my notes. This stimulates me to work on short and concise
  tasting notes.

So you can use both!
